pragma solidity ^0.5.12;

//teste de comentário que o compilador não vai ler usando barra/barra. 
//Colocar o acento circunflexo antes da versão do solidity, significa que vc garante que o que vc fez funcionará em outras versões


contract Locacao {
    
    string public locatario;
    string public locador;
    uint256 private valor;
    uint256 constant numeroMaximoLegalDeAlugueisParaMulta = 3;

    constructor (string memory nomeLocador, string memory nomeLocatario, uint256 valorDoAluguel) public {
    
        locador = nomeLocador;
        locatario = nomeLocatario;
        valor = valorDoAluguel;
        }
        
    function valorAtualDoAluguel () public view returns (uint256) 
    {
        return valor;
    }
            
   // function simulaMulta(uint256 mesesRestantes), uint256 totalMesesContrato) public view returns (uint256 valorMulta) {
        
    function simulaMulta(uint256 mesesRestantes, uint256 totalMesesContrato) public view returns (uint256 valorMulta) {
    
    
        valorMulta = valor*numeroMaximoLegalDeAlugueisParaMulta;
        valorMulta = valorMulta/totalMesesContrato;
        valorMulta = valorMulta*mesesRestantes;
        
        return valorMulta;
    
        }
    
    function reajustaAluguel (uint256 percentualReajuste) public {
    uint256 valorDoAcrescimo = 0;
    
    valorDoAcrescimo = ((valor*percentualReajuste)/100);
    
    valor = valor + valorDoAcrescimo;
}
    
    function aditamentoValorAluguel (uint256 valorCerto) public
    {
    // em relação ao aditamento do valor do aluguel, posso receber (1) a diferença do valor do aluguel (gasta muito gás para calcular), (2) o valor certo (gasta menos gás para calcular) 
    // ou (3) o percentual (sub)(gasta muito gás para calcular)
    
    valor = valorCerto;
    
    // Abrir o Metamask antes, depois atualizar o Solidity, e no Deploy, ao linkar o MetaMask no Injected Web3, ao clicar em transact, vc assina eletronicamente, criando o hash 
    // correspondente à transação, seja de implantação do contrato, seja de interação do contrato.
            }
            
    // Condicionante
    // if (valorMulta < 10)        
    // { return 0;
    // }
    
    function aplicaMulta(uint256 mesesRestantes, uint256 percentual) public
    {
        require (mesesRestantes<30, "Periodo de Contrato Inválido");
        for (uint i=1; i<mesesRestantes; i++) {
            valor = valor+((valor*percentual)/100);
        }
        }
    
    // para X acontecer (no exemplo - aplicar multa), require significa uma condição precisa acontecer.
    // For (coloca um valor inicial para a comparação e o índice, que neste caso começa no 1 (ou seja, primeiro mês); (após coloca a condicional, se meu índice for menor do que os meses restantes, 
    // eu executarei o índice; o i ++ é um atalho para escrever menos, i++ é igual a i +1)
    // Após as chaves {, coloca-se o valor, que é igual a valor multiplicado por (índice + 1);
    // essa função fica em loop buscando a condição se satisfazer.
    // na linha "for" acima, está sendo feita uma declaração de variável.
    // se o require não for satisfeito, então apareceria uma informação indicando que o contrato não está válido.
}
